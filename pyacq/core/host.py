from .rpc import ProcessSpawner, RPCServer
from .nodegroup import NodeGroup


class HostSpawner(ProcessSpawner):
    def __init__(self, name):
        """Spawns a new process with a Host.
        
        This object can be used to control both the spawned process and the
        Host itself.
        """
        ProcessSpawner.__init__(self, name=name)
        self.host = self.client._import('pyacq.core.host').Host(name)

    def create_nodegroup(self, **kwds):
        return self.host.create_nodegroup(**kwds)
    
    def close_all_nodegroups(self, force=False, **kwds):
        return self.host.close_all_nodegroups(force=force, **kwds)
    

class Host(object):
    """
    Host serves as a pre-existing contact point for spawning
    new processes on a remote machine. 
    
    One Host instance must be running on each machine that will be connected
    to by a Manager. The Host is only responsible for creating and destroying
    NodeGroups.
    """
    def __init__(self, name):
        self.name = name
        self.spawners = set()
        
        # Publish this object so we can easily retrieve it from any other
        # machine.
        RPCServer.get_server()['host'] = self

    def create_nodegroup(self, name, manager, **kwds):
        """Create a new NodeGroup in a new process and return a proxy to it.
        
        Parameters:
        -----------
        name : str
            The name of the new NodeGroup. This will also be used as the name
            of the process in log records sent to the Manager.
        manager : Manager or ObjectProxy<Manager>
            The Manager to which this NodeGroup belongs. All stdout/stderr
            output generated by the new process will be forwarded to the 
            manager's log server.
            
        All extra keyword arguments are passed to `ProcessSpawner()`.
        """
        ps = ProcessSpawner(name=name, **kwds)
        rng = ps.client._import('pyacq.core.nodegroup')
        ps._nodegroup = rng.NodeGroup(ps.client['self'])
        ps._manager = manager
        self.spawners.add(ps)
        return ps._nodegroup

    def close_all_nodegroups(self, force=False):
        """Close all NodeGroups belonging to this host.
        """
        for sp in self.spawners:
            if force:
                sp.kill()
            else:
                sp.stop()
